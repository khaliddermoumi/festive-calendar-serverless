@page "/counter"

@using Microsoft.AspNetCore.SignalR.Client
@inject IHttpClientFactory ClientFactory

<h3>Hub State: @_hubConnection.State</h3>
<br>
<h3>Predictions List</h3>
@if (_messages.Count > 0)
{
    <table>
    <tr>
        <th>
            Image
        </th>
        <th>
            Score
        </th>
    </tr>
    @foreach (var message in _messages)
        {
            <tr>
                <td>
                    <img src="@(message.ImageUrl)" height="100px">
                </td>
                <td>
                    <p>Hot Dog Score: <b>@($"{message.HotDog:P1}")</b></p>
                    <p>Not Hot Dog Score: <b>@($"{message.NonHotDog:P1}")</b></p>
                </td>
            </tr>
        }
    </table>
}
else
{
    <p>Nothing to see here.</p>
}

@code {
    private HubConnection _hubConnection;
    private readonly List<ClientMessage> _messages = new List<ClientMessage>();

    protected override async Task OnInitializedAsync()
    {
        var httpClient = ClientFactory.CreateClient("HotDogApi");

        var functionAppBaseUri = httpClient.BaseAddress?.ToString();

        _hubConnection = new HubConnectionBuilder()
            .WithUrl(functionAppBaseUri)
            .Build();

        _hubConnection.On<ClientMessage>("clientMessage", (clientMessage) =>
            {
            _messages.Insert(0, clientMessage);
            StateHasChanged();
        });

        await _hubConnection.StartAsync();

        var list = await httpClient.GetFromJsonAsync<List<ClientMessage>>("list");

        _messages.AddRange(list);
    }

    public bool IsConnected =>
        _hubConnection.State == HubConnectionState.Connected;

    public class ClientMessage
    {
        public string ImageUrl { get; set; }
        public double HotDog { get; set; }
        public double NonHotDog { get; set; }
    }

}